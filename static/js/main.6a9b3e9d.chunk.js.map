{"version":3,"sources":["images/bach.jpg","images/beethoven.jpg","images/chopin.jpg","images/debussy.jpg","images/handel.jpg","images/mendel.jpg","images/mozart.jpg","images/palestrina.jpg","images/strav.jpg","images/tchai.jpg","images/verdi.jpg","images/vivaldi.jpg","Containers.js","Navs.js","Jumbotrons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Containers","_ref","images","doOnClick","containerClass","console","log","imagesList","length","map","image","react_default","a","createElement","className","key","id","src","source","alt","text","onClick","randomArr","randomList","i","ranNum","Math","floor","random","indexOf","push","shaky","Navs","navData","href","classColor","message","current","top","Jumbotrons","App","state","Bach","clicked","Beeth","Chop","Debu","Hand","Mend","Moza","Pales","Stra","Tchai","Verdi","Vival","navDataCopy","_this","imagesCopy","containerClassCopy","j","setState","src_Navs","this","src_Jumbotrons","src_Containers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a9b3e9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bach.a0412909.jpg\";","module.exports = __webpack_public_path__ + \"static/media/beethoven.7f2dd07a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/chopin.7803ce06.jpg\";","module.exports = __webpack_public_path__ + \"static/media/debussy.e08ae73b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/handel.b6df7900.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mendel.3b7d572a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mozart.e099936b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/palestrina.b73e8084.jpg\";","module.exports = __webpack_public_path__ + \"static/media/strav.01d5bc49.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tchai.b5e3348f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/verdi.ca9e5dfc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vivaldi.c8eb24d7.jpg\";","import React from 'react';\n\nconst Containers = ({images, doOnClick, containerClass}) => {\n    console.log (images);\n    const imagesList = images.length ? (\n        images.map(image => {\n            return(\n                <div className=\"col-3 img-group\" key={image.id} id=\"img-click\">\n                    <img src={image.source} alt={image.text} className=\"img-thumbnail\" onClick={()=>doOnClick(image.id) } />\n                    <div className = \"caption text-center\">{image.text} </div>\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"text-center\"> No Images to display!!! </p>\n    )\n    const randomArr = [];\n    const randomList = [];\n    for (let i=0; i<imagesList.length; i++){\n        let ranNum = Math.floor((Math.random()*imagesList.length));\n        console.log(randomArr);\n        console.log(ranNum);\n        while(randomArr.indexOf(ranNum)!== -1){\n            ranNum = Math.floor((Math.random()*imagesList.length));\n        }\n        randomList.push(imagesList[ranNum])\n        randomArr.push(ranNum);\n    }\n    return(\n        <div className={containerClass.shaky} >\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-1\"></div>\n                <div className=\"col-12 col-sm-10\">\n                    <div className=\"row\">\n                        { randomList }\n                    </div>\n                </div>\n                <div className=\"col-12 col-sm-1\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Containers;","import React from 'react';\n\nconst Navs = ({navData}) => {\n    \n    return(\n        <nav className=\"navbar navbar-dark bg-dark fixed-top\">\n            <a className=\"navbar-brand\" href=\"#\">\n                <h3>Clicky Game</h3>\n            </a>\n            <span className = \"navbar-text\">\n                <h3 className = {navData.classColor} >{navData.message}</h3>\n            </span>\n            <span className=\"navbar-text\">\n                <h3>Score : {navData.current} | Top Score: {navData.top} </h3>\n            </span>\n\n        </nav>\n    )\n}\n\nexport default Navs;","import React from 'react';\n\nfunction Jumbotrons () {\n    return(\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Clicky Game!</h1>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotrons;","import React, { Component } from 'react';\nimport Containers from './Containers';\nimport Navs from './Navs';\nimport Jumbotrons from './Jumbotrons';\nimport Bach from './images/bach.jpg';\nimport Beeth from './images/beethoven.jpg';\nimport Chop from './images/chopin.jpg';\nimport Debu from './images/debussy.jpg';\nimport Hand from './images/handel.jpg';\nimport Mend from './images/mendel.jpg';\nimport Moza from './images/mozart.jpg';\nimport Pales from './images/palestrina.jpg';\nimport Stra from './images/strav.jpg';\nimport Tchai from './images/tchai.jpg';\nimport Verdi from './images/verdi.jpg';\nimport Vival from './images/vivaldi.jpg';\n\n\nimport './App.css';\n\n\nclass App extends Component {\n  state={\n    navData:\n      {\n        current:0,\n        top: 0,\n        message: \"Click an image to begin\",\n        classColor: \" \"\n      },\n      containerClass:{\n        shaky: \"container\"\n      },\n    images:[\n      {id: 1, source: Bach, text:\"Bach\", clicked: false},\n      {id: 2, source: Beeth, text:\"Beethoven\", clicked: false},\n      {id: 3, source: Chop, text:\"Chopin\", clicked: false},\n      {id: 4, source: Debu, text:\"Debussy\", clicked: false},\n      {id: 5, source: Hand, text:\"Handel\", clicked: false},\n      {id: 6, source: Mend, text:\"Mendelsohn\", clicked: false},\n      {id: 7, source: Moza, text:\"Mozart\", clicked: false},\n      {id: 8, source: Pales, text:\"Palestrina\", clicked: false},\n      {id: 9, source: Stra, text:\"Stravinsky\", clicked: false},\n      {id: 10, source: Tchai, text:\"Tchaikovsky\", clicked: false},\n      {id: 11, source: Verdi, text:\"Verdi\", clicked: false},\n      {id: 12, source: Vival, text:\"Vivaldi\", clicked: false}\n    ]\n      \n  }\n\n  doOnClick = (id) => {\n    let navDataCopy = this.state.navData;\n    let imagesCopy = this.state.images;\n    let containerClassCopy = this.state.containerClass;\n\n    for (let i=0; i<imagesCopy.length; i++){\n      if (imagesCopy[i].id === id) {\n        if (!imagesCopy[i].clicked){\n          imagesCopy[i].clicked = true;\n          navDataCopy.message = \"You guessed correctly!!!\";\n          navDataCopy.classColor = \"success\";\n          containerClassCopy.shaky = \"container\"\n          navDataCopy.current++;\n          if (navDataCopy.current > navDataCopy.top) {\n            navDataCopy.top = navDataCopy.current;\n          }\n        } else{\n          navDataCopy.message = \"You guessed incorrectly!!!\";\n          navDataCopy.classColor = \"fail\";\n          navDataCopy.current = 0;\n          containerClassCopy.shaky = \"container shaky\";\n          for (let j=0; j<imagesCopy.length; j++){\n            imagesCopy[j].clicked=false;\n          }\n        }\n      }\n    }\n    this.setState({\n      navData: navDataCopy,\n      images: imagesCopy,\n      containerClass: containerClassCopy\n    })   \n  }\n\n \n  render() {\n    return (\n      <div className=\"App\">\n        <Navs navData={this.state.navData} />\n        <Jumbotrons />\n        <Containers images={this.state.images} doOnClick={this.doOnClick} containerClass={this.state.containerClass} />\n        \n        \n      </div>\n    );\n    }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}