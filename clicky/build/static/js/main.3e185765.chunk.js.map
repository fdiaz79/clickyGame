{"version":3,"sources":["Containers.js","Navs.js","Jumbotrons.js","App.js","serviceWorker.js","index.js"],"names":["Containers","_ref","images","doOnClick","console","log","imagesList","length","map","image","react_default","a","createElement","className","key","id","src","source","alt","text","onClick","randomArr","randomList","i","ranNum","Math","floor","random","indexOf","push","Navs","navData","href","message","current","top","Jumbotrons","App","state","clicked","navDataCopy","_this","imagesCopy","j","setState","src_Navs","this","src_Jumbotrons","src_Containers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e185765.chunk.js","sourcesContent":["import React from 'react';\n\nconst Containers = ({images, doOnClick}) => {\n    console.log (images);\n    const imagesList = images.length ? (\n        images.map(image => {\n            return(\n                <div className=\"col-3\" key={image.id} id=\"img-click\">\n                    <img src={image.source} alt={image.text} className=\"img-thumbnail\" onClick={()=>doOnClick(image.id) } />\n                </div>\n            )\n        })\n    ) : (\n        <p className=\"text-center\"> No Images to display!!! </p>\n    )\n    const randomArr = [];\n    const randomList = [];\n    for (let i=0; i<imagesList.length; i++){\n        let ranNum = Math.floor((Math.random()*imagesList.length));\n        console.log(randomArr);\n        console.log(ranNum);\n        while(randomArr.indexOf(ranNum)!== -1){\n            ranNum = Math.floor((Math.random()*imagesList.length));\n        }\n        randomList.push(imagesList[ranNum])\n        randomArr.push(ranNum);\n    }\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-12 col-sm-2\"></div>\n                <div className=\"col-12 col-sm-8\">\n                    <div className=\"row\">\n                        { randomList }\n                    </div>\n                </div>\n                <div className=\"col-12 col-sm-2\"></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Containers;","import React from 'react';\n\nconst Navs = ({navData}) => {\n    \n    return(\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <a className=\"navbar-brand\" href=\"\">\n                <h3>Clicky Game</h3>\n            </a>\n            <span className=\"navbar-text\">\n                <h3>{navData.message}</h3>\n            </span>\n            <span className=\"navbar-text\">\n                <h3>Score : {navData.current} | Top Score: {navData.top} </h3>\n            </span>\n\n        </nav>\n    )\n}\n\nexport default Navs;","import React from 'react';\n\nfunction Jumbotrons () {\n    return(\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Clicky Game!</h1>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Jumbotrons;","import React, { Component } from 'react';\nimport Containers from './Containers';\nimport Navs from './Navs';\nimport Jumbotrons from './Jumbotrons';\n\nimport './App.css';\n\n\nclass App extends Component {\n  state={\n    navData:\n      {\n        current:0,\n        top: 0,\n        message: \"Click an image to begin\"\n      },\n    images:[\n      {id: 1, source: \"../images/bach.jpg\", text:\"Bach\", clicked: false},\n      {id: 2, source: \"../images/beethoven.jpg\", text:\"Beethoven\", clicked: false},\n      {id: 3, source: \"../images/chopin.jpg\", text:\"Chopin\", clicked: false},\n      {id: 4, source: \"../images/debussy.jpg\", text:\"Debussy\", clicked: false},\n      {id: 5, source: \"../images/handel.jpg\", text:\"Handel\", clicked: false},\n      {id: 6, source: \"../images/mendel.jpg\", text:\"Mendelsohn\", clicked: false},\n      {id: 7, source: \"../images/mozart.jpg\", text:\"Mozart\", clicked: false},\n      {id: 8, source: \"../images/palestrina.jpg\", text:\"Palestrina\", clicked: false},\n      {id: 9, source: \"../images/strav.jpg\", text:\"Stravinsky\", clicked: false},\n      {id: 10, source: \"../images/tchai.jpg\", text:\"Tchaikovsky\", clicked: false},\n      {id: 11, source: \"../images/verdi.jpg\", text:\"Verdi\", clicked: false},\n      {id: 12, source: \"../images/vivaldi.jpg\", text:\"Vivaldi\", clicked: false}\n    ]\n      \n  }\n\n  doOnClick = (id) => {\n    let navDataCopy = this.state.navData;\n    let imagesCopy = this.state.images;\n\n    for (let i=0; i<imagesCopy.length; i++){\n      if (imagesCopy[i].id === id) {\n        if (!imagesCopy[i].clicked){\n          imagesCopy[i].clicked = true;\n          navDataCopy.message = \"You guessed correctly!!!\";\n          navDataCopy.current++;\n          if (navDataCopy.current > navDataCopy.top) {\n            navDataCopy.top = navDataCopy.current;\n          }\n        } else{\n          navDataCopy.message = \"You guessed incorrectly!!!\";\n          navDataCopy.current = 0;\n          for (let j=0; j<imagesCopy.length; j++){\n            imagesCopy[j].clicked=false;\n          }\n        }\n      }\n    }\n    this.setState({\n      navData: navDataCopy,\n      images: imagesCopy\n    })   \n  }\n\n \n  render() {\n    return (\n      <div className=\"App\">\n        <Navs navData={this.state.navData} />\n        <Jumbotrons />\n        <Containers images={this.state.images} doOnClick={this.doOnClick} />\n        \n        \n      </div>\n    );\n    }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}